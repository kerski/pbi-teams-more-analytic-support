trigger: none

variables:
  - group: MYPBITMA

resources:
  pipelines:
    - pipeline: test-trigger  # Alias for the triggering pipeline
      source: PBIP-CI    # Name of the pipeline being referenced
      project: PBI-Test      # Name of the project where the pipeline resides
      trigger:
        branches:
          include:
            - development

jobs:
- job: TriggeredBuild
  workspace:
      clean: all
  # Define the build agent's operating system
  pool:
    vmImage: 'windows-latest'

  steps:
  # Step 1: Checkout the current code with full Git history
  - checkout: self
    persistCredentials: true
    fetchDepth: 0   
  # Step 2: Download the artifact named 'CombinedReports' from 'test-trigger'
  - task: DownloadBuildArtifacts@1
    inputs:
      buildType: 'specific'
      project: 'PBI-Test' # Replace with your project name
      pipeline: '$(UPSTREAM_PIPELINE_ID)' # Replace with the ID of the pipeline that publishes the artifact
      runVersion: 'latest'
      artifactName: 'CombinedReports'
      targetPath: '$(Pipeline.Workspace)/CombinedReports'
      itemPattern: CombinedReports/**

  # Step 3: Find each *.Report folder and call PBI Inspector CLI
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $gitPAT = ${env:GIT_PAT}

        # Import the module
        Import-Module -Name ".\Scripts\Custom\Add-FileToAzureDevOpsRepo.psm1" -Force 

        $combinedReportsPath = "$(Pipeline.Workspace)/a/CombinedReports"
        Write-Host "##[debug]$combinedReportsPath"
        $reportFolders = Get-ChildItem -Path $combinedReportsPath -Directory -Recurse | Where-Object { $_.Name -like "*.Report" }

        # Get the current time in a specific format
        $currentTime = [DateTime]::UtcNow.ToString('yyyyMMdd_HHmmss')
        $baseUrl = "$(System.CollectionUri)" # Base URL for the organization
        $project = "$(System.TeamProject)"   # Current project name

        foreach ($folder in $reportFolders) {
            Write-Host "##[debug]Processing folder: $($folder.FullName)"
            
            # Retrieve the workspace name from the folder path
            # Assumes the format in workspace~repositoryId~branchName~commitId
            $tempSplit = ($folder.FullName -split "~")
            $workspaceName = $tempSplit[$tempSplit.Length - 4]
            $repositoryId = $tempSplit[$tempSplit.Length - 3]
            $branchName = $tempSplit[$tempSplit.Length - 2]
            $commitId = ($tempSplit[$tempSplit.Length - 1] -split "\\")[0]

            Write-Host "##[debug]Workspace Name: $tempsplit"
            Write-Host "##[debug]Repository ID: $repositoryId"
            Write-Host "##[debug]Branch Name: $branchName"
            Write-Host "##[debug]Commit ID: $commitId"
            
            if(!(Test-Path -LiteralPath "$($folder.FullName)/.platform")){
                Write-Error "Could not locate .platform file in $($folder.FullName)"
                exit 1
            }

            # Get platform content to retrieve report name
            $platformContent = Get-Content -LiteralPath "$($folder.FullName)/.platform" -Encoding utf8 | ConvertFrom-Json            
            $reportName = $platformContent.metadata.displayName     
            $logicalId = $platformContent.config.logicalId                   
            
            $outputFilePath = ".\PBIInspectorTests\$($repositoryId)\$($branchName)\$($logicalId)~$($commitId)~$($currentTime)"

            Write-Host "##[debug]Output file path: $outputFilePath"
            # Run PBIXInspectorCLI
            .\PBI-Inspector\PBIXInspectorCLI -pbipreport $folder.FullName `
                                             -rules .\Rules\pbi-inspector-custom-rules.json `
                                             -formats "JSON" `
                                             -verbose true `
                                             -output $outputFilePath

            # Retrieves files saved
            $filesToSaveToGit = Get-ChildItem -Path $outputFilePath -Recurse -File

            foreach($tempFile in $filesToSaveToGit){
              Write-Host "##[debug] Saving $($tempFile.Name) to Git"

              # Get Content
              $tempContent = Get-Content -Raw $tempFile.FullName
              
              
              Add-FileToAzureDevOpsRepo -BaseUrl $baseUrl `
                -ProjectName $project `
                -RepositoryName "pbi-test-results" `
                -AccessToken $gitPAT `
                -BranchName "main" `
                -Path "/PBIInspectorTests/$($repositoryId)/$($branchName)/$($logicalId)~$($commitId)~$($currentTime)/pbi-inspector-results.json" `
                -Content $tempContent `
                -CommitMessage "PBI Inspector results saved to $($tempFile.Name)"                                                                                       

              # Setup record file
              $recordFile = "$($repositoryId)~$($branchName)~$($logicalId)~$($commitId)~$($currentTime).csv"
              $rows = @()
              $header = @('"repository_id"','"branch_name"','"logical_id"','"commit_id"','"artifact_name"','"artifact_type"')
              $rows += (
                        '"{0}","{1}","{2}","{3}","{4}","{5}"' -f `
                        $repositoryId, $branchName, $logicalId,$commitId,$reportName,"Report"
                        )            
              $csvContent = $rows -join "`n"

              Add-FileToAzureDevOpsRepo -BaseUrl $baseUrl `
              -ProjectName $project `
              -RepositoryName "pbi-test-results" `
              -AccessToken $gitPAT `
              -BranchName "main" `
              -Path "/Artifacts/$($recordFile)" `
              -Content $csvContent `
              -CommitMessage "Artifacts results saved to $recordFile"

            }# end foreach
        }
    displayName: 'Run PBI Inspector CLI on each *.Report folder and save test results'
    env:
      GIT_PAT: $(GIT_PAT)